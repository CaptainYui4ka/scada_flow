{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0423\\u0447\\u0435\\u0431\\u0430\\\\project\\\\\\u0434\\u0438\\u043F\\u043B\\u043E\\u043C\\\\react-flow\\\\react-flow_test\\\\src\\\\react-flow-renderer\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport ReactFlow, { removeElements, updateEdge, addEdge, Background, MiniMap, Controls } from 'react-flow-renderer';\nimport { nodeTypes } from './Nodes';\nimport styleConnect from './style-connect';\nimport { Button, Modal } from 'bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = new WebSocket('ws://localhost:5000/', \"protocolOne\");\n\nconst ReactFlowRenderer = () => {\n  _s();\n\n  const [elements, setElements] = useState([styleConnect]);\n  const [name, setName] = useState(\"\");\n  const [activeNode, setActiveNode] = useState();\n  const [newName, setNewName] = useState(\"\");\n  const [instance, setInstance] = useState();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const showModal = () => {\n    setIsOpen(true);\n  };\n\n  const hideModal = () => {\n    setIsOpen(true);\n  };\n\n  useEffect(() => {\n    if (activeNode) setNewName(activeNode.data.label);\n  }, [activeNode]);\n\n  const elementRemoveHandler = elementTobeRemoved => {\n    setElements(prev => removeElements(elementTobeRemoved, prev));\n  };\n\n  const connectHandler = params => {\n    setElements(els => addEdge({ ...params,\n      type: 'smoothstep',\n      style: {\n        stroke: '#FF0000'\n      },\n      animated: true\n    }, els));\n  };\n\n  const addRectangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"rectangle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addCircleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"circle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addTriangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"triangle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addTextHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"text\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const edgeUpdateHandler = (oldEdge, newConnection) => setElements(els => updateEdge(oldEdge, newConnection, els));\n\n  const clickHandler = e => {\n    var htmlString = e.target.outerHTML.toString();\n    var index = htmlString.indexOf(` id=\"`);\n    index += 5;\n    const currentId = htmlString.substr(index, 13);\n    elements.forEach(_current => {\n      if (_current.id === currentId) {\n        setActiveNode(_current);\n      }\n    }); // setNewName(activeNode.data.label)\n  };\n\n  const updateNodeHandler = () => {\n    if (!activeNode) return;\n    setElements(elements.map(_current => {\n      if (_current.id === activeNode.id) {\n        return { ..._current,\n          data: {\n            label: newName,\n            id: _current.data.id\n          }\n        };\n      }\n\n      return _current;\n    }));\n  };\n\n  const onLoad = reactFlowInstance => {\n    setInstance(reactFlowInstance);\n    reactFlowInstance.fitView();\n  };\n\n  socket.onopen = () => {\n    console.log('подключено');\n  };\n\n  socket.onmessage = event => {\n    console.log('есть сообщение', event.data);\n  }; //save pos\n\n\n  const saveChangesHandler = () => {\n    console.log(\"state\", instance.getElements()); //отправка json\n\n    localStorage.setItem('state', JSON.stringify(instance.getElements()));\n    let pos = JSON.stringify(instance.getElements());\n    socket.send(pos);\n  };\n\n  socket.onclose = function (event) {\n    if (event.wasClean) {\n      console.log('Соединение закрыто чисто');\n    } else {\n      console.log('Обрыв соединения');\n    }\n\n    console.log('Код: ' + event.code + ' причина: ' + event.reason);\n  };\n\n  socket.onerror = function (event) {\n    console.log(event);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"75vh\",\n      width: \"75vw\",\n      border: \"1px solid black\",\n      marginLeft: \"12.5vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onElementsRemove: elementRemoveHandler,\n      onConnect: connectHandler,\n      deleteKeyCode: 8 || 46,\n      onEdgeUpdate: edgeUpdateHandler,\n      nodeTypes: nodeTypes,\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      connectionLineStyle: {\n        stroke: \"black\",\n        strokeWidth: 2\n      },\n      onDoubleClick: clickHandler,\n      onLoad: onLoad,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 15,\n        size: 2,\n        color: \"#c8c8c8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          switch (node.type) {\n            case \"rectangle\":\n              return \"red\";\n\n            case \"circle\":\n              return \"#00ff00\";\n\n            case \"triangle\":\n              return \"rgb(0,0,255)\";\n\n            default:\n              return \"#eee\";\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: name,\n        onChange: e => setName(e.target.value),\n        type: \"text\",\n        placeholder: \"Enter new node name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addRectangleHandler,\n        children: \"Create Rectangle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addCircleHandler,\n        children: \"Create Circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addTriangleHandler,\n        children: \"Create Triangle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addTextHandler,\n        children: \"Plain text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newName,\n        onChange: e => setNewName(e.target.value),\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: updateNodeHandler,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: saveChangesHandler,\n        children: \"Save changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showModal,\n        children: \"Modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: isOpen,\n      onClose: hideModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Hi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: \"kekw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: hideModal,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReactFlowRenderer, \"dnJwVbnbyK8YaxPFJMcIL0cXopA=\");\n\n_c = ReactFlowRenderer;\nexport default ReactFlowRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactFlowRenderer\");","map":{"version":3,"sources":["C:/Учеба/project/диплом/react-flow/react-flow_test/src/react-flow-renderer/index.jsx"],"names":["React","useState","useEffect","ReactFlow","removeElements","updateEdge","addEdge","Background","MiniMap","Controls","nodeTypes","styleConnect","Button","Modal","socket","WebSocket","ReactFlowRenderer","elements","setElements","name","setName","activeNode","setActiveNode","newName","setNewName","instance","setInstance","isOpen","setIsOpen","showModal","hideModal","data","label","elementRemoveHandler","elementTobeRemoved","prev","connectHandler","params","els","type","style","stroke","animated","addRectangleHandler","newNode","id","Date","now","position","x","y","addCircleHandler","addTriangleHandler","addTextHandler","edgeUpdateHandler","oldEdge","newConnection","clickHandler","e","htmlString","target","outerHTML","toString","index","indexOf","currentId","substr","forEach","_current","updateNodeHandler","map","onLoad","reactFlowInstance","fitView","onopen","console","log","onmessage","event","saveChangesHandler","getElements","localStorage","setItem","JSON","stringify","pos","send","onclose","wasClean","code","reason","onerror","height","width","border","marginLeft","strokeWidth","node","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"./styles.css\";\r\nimport ReactFlow, {\r\n    removeElements,\r\n    updateEdge,\r\n    addEdge,\r\n    Background,\r\n    MiniMap,\r\n    Controls\r\n} from 'react-flow-renderer';\r\n\r\nimport { nodeTypes } from './Nodes';\r\nimport styleConnect from './style-connect';\r\nimport { Button, Modal } from 'bootstrap';\r\nconst socket = new WebSocket('ws://localhost:5000/', \"protocolOne\");\r\n\r\n\r\nconst ReactFlowRenderer = () => {\r\n    const [elements, setElements] = useState([styleConnect]);\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [activeNode, setActiveNode] = useState();\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [instance, setInstance] = useState();\r\n\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n    const showModal = () => {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const hideModal = () => {\r\n        setIsOpen(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activeNode) setNewName(activeNode.data.label);\r\n    }, [activeNode]);\r\n\r\n    const elementRemoveHandler = (elementTobeRemoved) => {\r\n        setElements((prev) => removeElements(elementTobeRemoved, prev));\r\n    };\r\n\r\n    const connectHandler = (params) => {\r\n        setElements((els) =>\r\n        addEdge({ ...params, type: 'smoothstep',style:{ stroke: '#FF0000'}, animated: true }, els))\r\n    };\r\n    \r\n    const addRectangleHandler = () => {\r\n        const newNode = {\r\n          id: `${Date.now()}`,\r\n          data: { label: `${name}` },\r\n          type: \"rectangle\",\r\n          position: {\r\n            x: 0,\r\n            y: 0\r\n          }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n    \r\n        setElements((prev) => {\r\n          return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addCircleHandler = () => {\r\n        const newNode = {\r\n          id: `${Date.now()}`,\r\n          data: { label: `${name}` },\r\n          type: \"circle\",\r\n          position: {\r\n            x: 0,\r\n            y: 0\r\n          }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n    \r\n        setElements((prev) => {\r\n          return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addTriangleHandler = () => {\r\n        const newNode = {\r\n          id: `${Date.now()}`,\r\n          data: { label: `${name}` },\r\n          type: \"triangle\",\r\n          position: {\r\n            x: 0,\r\n            y: 0\r\n          }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n        setElements((prev) => {\r\n          return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n        \r\n    };\r\n\r\n    const addTextHandler = () => {\r\n        const newNode = {\r\n          id: `${Date.now()}`,\r\n          data: { label: `${name}` },\r\n          type: \"text\",\r\n          position: {\r\n            x: 0,\r\n            y: 0\r\n          }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n    \r\n        setElements((prev) => {\r\n          return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\r\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n    const clickHandler = (e) => {\r\n        var htmlString = e.target.outerHTML.toString();\r\n        var index = htmlString.indexOf(` id=\"`);\r\n        index += 5;\r\n        const currentId = htmlString.substr(index, 13);\r\n\r\n        elements.forEach((_current) => {\r\n            if (_current.id === currentId) {\r\n                setActiveNode(_current);\r\n            }\r\n        });\r\n    // setNewName(activeNode.data.label)\r\n    };\r\n\r\n    const updateNodeHandler = () => {\r\n        if (!activeNode) return;\r\n        setElements(\r\n          elements.map((_current) => {\r\n            if (_current.id === activeNode.id) {\r\n              return {\r\n                ..._current,\r\n                data: { label: newName, id: _current.data.id }\r\n              };\r\n            }\r\n            return _current;\r\n          })\r\n        );\r\n    };\r\n\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        setInstance(reactFlowInstance);\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n    \r\n        socket.onopen = () => {\r\n            console.log('подключено');\r\n        }\r\n\r\n        socket.onmessage = (event) => {\r\n            console.log('есть сообщение', event.data)\r\n        }\r\n\r\n        //save pos\r\n        const saveChangesHandler = () => {\r\n            console.log(\"state\", instance.getElements());\r\n\r\n            //отправка json\r\n            localStorage.setItem('state', JSON.stringify(instance.getElements()));\r\n            let pos = JSON.stringify(instance.getElements());\r\n            socket.send(pos);\r\n        }\r\n\r\n        socket.onclose = function(event) {\r\n            if (event.wasClean) {\r\n              console.log('Соединение закрыто чисто')\r\n            } else {\r\n              console.log('Обрыв соединения')\r\n            }\r\n            console.log('Код: ' + event.code + ' причина: ' + event.reason)\r\n        }\r\n\r\n        socket.onerror = function(event) {\r\n            console.log(event);\r\n        }\r\n\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: \"75vh\",\r\n                width: \"75vw\",\r\n                border: \"1px solid black\",\r\n                marginLeft: \"12.5vw\"\r\n            }}\r\n        >\r\n        <ReactFlow\r\n            elements={elements}\r\n            onElementsRemove={elementRemoveHandler}\r\n            onConnect={connectHandler}\r\n            deleteKeyCode={8 || 46}\r\n            onEdgeUpdate={edgeUpdateHandler}\r\n            nodeTypes={nodeTypes}\r\n            snapToGrid={true}\r\n            snapGrid={[16, 16]}\r\n            connectionLineStyle={{ stroke: \"black\", strokeWidth: 2 }}\r\n            onDoubleClick={clickHandler}\r\n            onLoad={onLoad}\r\n        >\r\n            <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" />\r\n\r\n            <MiniMap\r\n                nodeColor={(node) => {\r\n                    switch (node.type) {\r\n                        case \"rectangle\":\r\n                            return \"red\";\r\n                        case \"circle\":\r\n                            return \"#00ff00\";\r\n                        case \"triangle\":\r\n                            return \"rgb(0,0,255)\";\r\n                        default:\r\n                            return \"#eee\";\r\n                    }   \r\n                }}\r\n            />\r\n\r\n            <Controls />\r\n        </ReactFlow>\r\n\r\n        <div>\r\n            <input\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                type=\"text\"\r\n                placeholder=\"Enter new node name\"\r\n            />\r\n\r\n            <button type=\"button\" onClick={addRectangleHandler}>\r\n                Create Rectangle\r\n            </button>\r\n\r\n            <button type=\"button\" onClick={addCircleHandler}>\r\n                Create Circle\r\n            </button>\r\n\r\n            <button type=\"button\" onClick={addTriangleHandler}>\r\n                Create Triangle\r\n            </button>\r\n\r\n            <button type=\"button\" onClick={addTextHandler}>\r\n                Plain text\r\n            </button>\r\n        </div>\r\n\r\n        <div>\r\n            <input\r\n                value={newName}\r\n                onChange={(e) => setNewName(e.target.value)}\r\n                type=\"text\"\r\n            />\r\n\r\n            <button type=\"button\" onClick={updateNodeHandler}>\r\n                Update\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button type=\"button\" onClick={saveChangesHandler}>\r\n                Save changes\r\n            </button>\r\n            <button onClick={showModal}>\r\n                Modal\r\n            </button>\r\n        </div>\r\n        <Modal show={isOpen} onClose={hideModal}>\r\n            <Modal.Header>Hi</Modal.Header>\r\n            <Modal.Body>kekw</Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={hideModal}>Cancel</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default ReactFlowRenderer;"]},"metadata":{},"sourceType":"module"}