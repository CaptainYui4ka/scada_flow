{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0423\\u0447\\u0435\\u0431\\u0430\\\\project\\\\\\u0434\\u0438\\u043F\\u043B\\u043E\\u043C\\\\react-flow\\\\react-flow_test\\\\src\\\\react-flow-renderer\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { saveAs } from 'file-saver';\nimport \"./styles.css\";\nimport ReactFlow, { removeElements, updateEdge, addEdge, Background, MiniMap, Controls, useNodesState, useEdgesState } from 'react-flow-renderer';\nimport { nodeTypes } from './Nodes';\nimport styleConnect from './style-connect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = new WebSocket('ws://localhost:5000/', \"protocolOne\");\n\nconst ReactFlowRenderer = () => {\n  _s();\n\n  const [elements, setElements] = useState([styleConnect]);\n  const [name, setName] = useState(\"\");\n  const [activeNode, setActiveNode] = useState();\n  const [newName, setNewName] = useState(\"\");\n  const [instance, setInstance] = useState(); //const [ nodes, setNodes, onNodesChange ] = useNodesState(initialNodes);\n  //получение данных с localStorage\n\n  const getPosition = () => {\n    const getPos = localStorage.getItem(\"Position\");\n    console.log('Position', JSON.parse(getPos)); //this.setState({ activeNode: JSON.parse(getPos)})\n  };\n\n  useEffect(() => {\n    if (activeNode) setNewName(activeNode.data.label);\n  }, [activeNode]);\n\n  const elementRemoveHandler = elementTobeRemoved => {\n    setElements(prev => removeElements(elementTobeRemoved, prev));\n  };\n\n  const connectHandler = params => {\n    setElements(els => addEdge({ ...params,\n      type: 'smoothstep',\n      style: {\n        stroke: '#FF0000'\n      },\n      animated: true\n    }, els));\n  };\n\n  const addRectangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"rectangle\",\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addCircleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"circle\",\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addTriangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"triangle\",\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addTextHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"text\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const edgeUpdateHandler = (oldEdge, newConnection) => setElements(els => updateEdge(oldEdge, newConnection, els));\n\n  const clickHandler = e => {\n    var htmlString = e.target.outerHTML.toString();\n    var index = htmlString.indexOf(` id=\"`);\n    index += 5;\n    const currentId = htmlString.substr(index, 13);\n    elements.forEach(_current => {\n      if (_current.id === currentId) {\n        setActiveNode(_current);\n      }\n    }); // setNewName(activeNode.data.label)\n  };\n\n  const updateNodeHandler = () => {\n    if (!activeNode) return;\n    setElements(elements.map(_current => {\n      if (_current.id === activeNode.id) {\n        return { ..._current,\n          data: {\n            label: newName,\n            id: _current.data.id\n          }\n        };\n      }\n\n      return _current;\n    }));\n  };\n\n  const onLoad = reactFlowInstance => {\n    setInstance(reactFlowInstance);\n    reactFlowInstance.fitView();\n  };\n\n  socket.onopen = () => {\n    console.log('подключено');\n  };\n  /*\r\n  socket.onmessage = (event) => {\r\n      console.log('есть сообщение')\r\n      const lineSignal = JSON.parse(event.data);\r\n      console.log(lineSignal);\r\n      let linedate = event.data;\r\n      console.log(linedate);\r\n      let json = JSON.stringify(linedate);\r\n      console.log(json);\r\n      let fileName = 'signal.json'\r\n        let fileToSave = new Blob([JSON.stringify(json, null, 4)], {\r\n          type: 'application/json',\r\n          name: fileName\r\n      })\r\n      saveAs (fileToSave, fileName);\r\n  }\r\n  */\n\n\n  var lineSignal;\n\n  function myMessage(event) {\n    let message = event.data;\n    console.log('есть сообщение');\n    lineSignal = JSON.parse(message);\n    console.log(lineSignal);\n  }\n\n  socket.onmessage = myMessage;\n  console.log(lineSignal); //save pos\n\n  const saveChangesHandler = () => {\n    console.log(\"state\", instance.getElements()); //сохранение в локальное хранилище\n\n    localStorage.setItem('Position', JSON.stringify(instance.getElements())); //отправка json\n\n    let pos = JSON.stringify(instance.getElements());\n    socket.send(pos);\n  };\n\n  socket.onclose = function (event) {\n    if (event.wasClean) {\n      console.log('Соединение закрыто чисто');\n    } else {\n      console.log('Обрыв соединения');\n    }\n\n    console.log('Код: ' + event.code + ' причина: ' + event.reason);\n  };\n\n  socket.onerror = function (event) {\n    console.log(event);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"75vh\",\n      width: \"75vw\",\n      border: \"1px solid black\",\n      marginLeft: \"12.5vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onElementsRemove: elementRemoveHandler,\n      onConnect: connectHandler,\n      deleteKeyCode: 8 || 46,\n      onEdgeUpdate: edgeUpdateHandler,\n      nodeTypes: nodeTypes,\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      connectionLineStyle: {\n        stroke: \"black\",\n        strokeWidth: 2\n      },\n      onDoubleClick: clickHandler,\n      onLoad: onLoad,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 15,\n        size: 2,\n        color: \"#c8c8c8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          switch (node.type) {\n            case \"rectangle\":\n              return \"red\";\n\n            case \"circle\":\n              return \"#00ff00\";\n\n            case \"triangle\":\n              return \"rgb(0,0,255)\";\n\n            default:\n              return \"#eee\";\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: name,\n        onChange: e => setName(e.target.value),\n        type: \"text\",\n        placeholder: \"Enter new node name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addRectangleHandler,\n        children: \"Create Rectangle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addCircleHandler,\n        children: \"Create Circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addTriangleHandler,\n        children: \"Create Triangle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addTextHandler,\n        children: \"Plain text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newName,\n        onChange: e => setNewName(e.target.value),\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: updateNodeHandler,\n        children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435 \\u0444\\u0438\\u0433\\u0443\\u0440\\u044B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: saveChangesHandler,\n        children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: getPosition,\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReactFlowRenderer, \"wpOFya5kwpBK8tvms0PnfCZyIic=\");\n\n_c = ReactFlowRenderer;\nexport default ReactFlowRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactFlowRenderer\");","map":{"version":3,"sources":["C:/Учеба/project/диплом/react-flow/react-flow_test/src/react-flow-renderer/index.jsx"],"names":["React","useState","useEffect","saveAs","ReactFlow","removeElements","updateEdge","addEdge","Background","MiniMap","Controls","useNodesState","useEdgesState","nodeTypes","styleConnect","socket","WebSocket","ReactFlowRenderer","elements","setElements","name","setName","activeNode","setActiveNode","newName","setNewName","instance","setInstance","getPosition","getPos","localStorage","getItem","console","log","JSON","parse","data","label","elementRemoveHandler","elementTobeRemoved","prev","connectHandler","params","els","type","style","stroke","animated","addRectangleHandler","newNode","id","Date","now","position","x","Math","random","window","innerWidth","y","innerHeight","addCircleHandler","addTriangleHandler","addTextHandler","edgeUpdateHandler","oldEdge","newConnection","clickHandler","e","htmlString","target","outerHTML","toString","index","indexOf","currentId","substr","forEach","_current","updateNodeHandler","map","onLoad","reactFlowInstance","fitView","onopen","lineSignal","myMessage","event","message","onmessage","saveChangesHandler","getElements","setItem","stringify","pos","send","onclose","wasClean","code","reason","onerror","height","width","border","marginLeft","strokeWidth","node","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { saveAs } from 'file-saver';\r\nimport \"./styles.css\";\r\nimport ReactFlow, {\r\n    removeElements,\r\n    updateEdge,\r\n    addEdge,\r\n    Background,\r\n    MiniMap,\r\n    Controls,\r\n    useNodesState,\r\n    useEdgesState\r\n} from 'react-flow-renderer';\r\n\r\nimport { nodeTypes } from './Nodes';\r\nimport styleConnect from './style-connect';\r\n\r\nconst socket = new WebSocket('ws://localhost:5000/', \"protocolOne\");\r\n\r\n\r\nconst ReactFlowRenderer = () => {\r\n    const [elements, setElements] = useState([styleConnect]);\r\n    const [name, setName] = useState(\"\");\r\n    const [activeNode, setActiveNode] = useState();\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [instance, setInstance] = useState();\r\n    //const [ nodes, setNodes, onNodesChange ] = useNodesState(initialNodes);\r\n\r\n    //получение данных с localStorage\r\n    const getPosition = () => {\r\n        const getPos = localStorage.getItem(\"Position\");\r\n        console.log('Position', JSON.parse(getPos));\r\n        //this.setState({ activeNode: JSON.parse(getPos)})\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activeNode) setNewName(activeNode.data.label);\r\n    }, [activeNode]);\r\n\r\n    const elementRemoveHandler = (elementTobeRemoved) => {\r\n        setElements((prev) => removeElements(elementTobeRemoved, prev));\r\n    };\r\n\r\n    const connectHandler = (params) => {\r\n        setElements((els) =>\r\n            addEdge({ ...params, type: 'smoothstep', style: { stroke: '#FF0000' }, animated: true }, els))\r\n    };\r\n\r\n    const addRectangleHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"rectangle\",\r\n            position: {\r\n                x: Math.random() * window.innerWidth,\r\n                y: Math.random() * window.innerHeight\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addCircleHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"circle\",\r\n            position: {\r\n                x: Math.random() * window.innerWidth,\r\n                y: Math.random() * window.innerHeight\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addTriangleHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"triangle\",\r\n            position: {\r\n                x: Math.random() * window.innerWidth,\r\n                y: Math.random() * window.innerHeight\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n\r\n    };\r\n\r\n    const addTextHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"text\",\r\n            position: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\r\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n    const clickHandler = (e) => {\r\n        var htmlString = e.target.outerHTML.toString();\r\n        var index = htmlString.indexOf(` id=\"`);\r\n        index += 5;\r\n        const currentId = htmlString.substr(index, 13);\r\n\r\n        elements.forEach((_current) => {\r\n            if (_current.id === currentId) {\r\n                setActiveNode(_current);\r\n            }\r\n        });\r\n        // setNewName(activeNode.data.label)\r\n    };\r\n\r\n    const updateNodeHandler = () => {\r\n        if (!activeNode) return;\r\n        setElements(\r\n            elements.map((_current) => {\r\n                if (_current.id === activeNode.id) {\r\n                    return {\r\n                        ..._current,\r\n                        data: { label: newName, id: _current.data.id }\r\n                    };\r\n                }\r\n                return _current;\r\n            })\r\n        );\r\n    };\r\n\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        setInstance(reactFlowInstance);\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n    socket.onopen = () => {\r\n        console.log('подключено');\r\n    }\r\n\r\n    /*\r\n    socket.onmessage = (event) => {\r\n        console.log('есть сообщение')\r\n        const lineSignal = JSON.parse(event.data);\r\n        console.log(lineSignal);\r\n        let linedate = event.data;\r\n        console.log(linedate);\r\n        let json = JSON.stringify(linedate);\r\n        console.log(json);\r\n        let fileName = 'signal.json'\r\n\r\n        let fileToSave = new Blob([JSON.stringify(json, null, 4)], {\r\n            type: 'application/json',\r\n            name: fileName\r\n        })\r\n        saveAs (fileToSave, fileName);\r\n    }\r\n    */\r\n   var lineSignal;\r\n\r\n    function myMessage(event) {\r\n        let message = event.data;\r\n\r\n        console.log('есть сообщение')\r\n        lineSignal = JSON.parse(message);\r\n        console.log(lineSignal);\r\n    }\r\n    socket.onmessage = myMessage;\r\n    console.log(lineSignal);\r\n    \r\n\r\n    //save pos\r\n    const saveChangesHandler = () => {\r\n        console.log(\"state\", instance.getElements());\r\n        //сохранение в локальное хранилище\r\n        localStorage.setItem('Position', JSON.stringify(instance.getElements()));\r\n        //отправка json\r\n        let pos = JSON.stringify(instance.getElements());\r\n        socket.send(pos);\r\n    }\r\n\r\n    socket.onclose = function (event) {\r\n        if (event.wasClean) {\r\n            console.log('Соединение закрыто чисто')\r\n        } else {\r\n            console.log('Обрыв соединения')\r\n        }\r\n        console.log('Код: ' + event.code + ' причина: ' + event.reason)\r\n    }\r\n\r\n    socket.onerror = function (event) {\r\n        console.log(event);\r\n    }\r\n\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: \"75vh\",\r\n                width: \"75vw\",\r\n                border: \"1px solid black\",\r\n                marginLeft: \"12.5vw\"\r\n            }}\r\n        >\r\n            <ReactFlow\r\n                elements={elements}\r\n                onElementsRemove={elementRemoveHandler}\r\n                onConnect={connectHandler}\r\n                deleteKeyCode={8 || 46}\r\n                onEdgeUpdate={edgeUpdateHandler}\r\n                nodeTypes={nodeTypes}\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n                connectionLineStyle={{ stroke: \"black\", strokeWidth: 2 }}\r\n                onDoubleClick={clickHandler}\r\n                onLoad={onLoad}\r\n            >\r\n                <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" />\r\n\r\n                <MiniMap\r\n                    nodeColor={(node) => {\r\n                        switch (node.type) {\r\n                            case \"rectangle\":\r\n                                return \"red\";\r\n                            case \"circle\":\r\n                                return \"#00ff00\";\r\n                            case \"triangle\":\r\n                                return \"rgb(0,0,255)\";\r\n                            default:\r\n                                return \"#eee\";\r\n                        }\r\n                    }}\r\n                />\r\n\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            <div>\r\n                <input\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    type=\"text\"\r\n                    placeholder=\"Enter new node name\"\r\n                />\r\n\r\n                <button type=\"button\" onClick={addRectangleHandler}>\r\n                    Create Rectangle\r\n                </button>\r\n\r\n                <button type=\"button\" onClick={addCircleHandler}>\r\n                    Create Circle\r\n                </button>\r\n\r\n                <button type=\"button\" onClick={addTriangleHandler}>\r\n                    Create Triangle\r\n                </button>\r\n\r\n                <button type=\"button\" onClick={addTextHandler}>\r\n                    Plain text\r\n                </button>\r\n            </div>\r\n\r\n            <div>\r\n                <input\r\n                    value={newName}\r\n                    onChange={(e) => setNewName(e.target.value)}\r\n                    type=\"text\"\r\n                />\r\n\r\n                <button type=\"button\" onClick={updateNodeHandler}>\r\n                    Обновить состояние фигуры\r\n                </button>\r\n            </div>\r\n            <div>\r\n                <button type=\"button\" onClick={saveChangesHandler}>\r\n                    Сохранение\r\n                </button>\r\n                <button type=\"button\" onClick={getPosition}>\r\n                    Загрузка\r\n                </button>\r\n                {/* Сделать кнопку которая открывает модальное окно modal.jsx */}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ReactFlowRenderer;"]},"metadata":{},"sourceType":"module"}