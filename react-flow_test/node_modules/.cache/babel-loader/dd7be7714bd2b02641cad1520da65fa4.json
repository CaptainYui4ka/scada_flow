{"ast":null,"code":"var _jsxFileName = \"F:\\\\\\u0414\\u0438\\u043F\\u043B\\u043E\\u043C\\\\react-flow\\\\react-flow_test\\\\src\\\\react-flow-renderer\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./styles.css\";\nimport ReactFlow, { removeElements, updateEdge, addEdge, Background, MiniMap, Controls } from 'react-flow-renderer';\nimport { nodeTypes } from './Nodes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nstate = {\n  data: \"This is data\",\n  num: 123,\n  boolean: true\n};\n\nconst ReactFlowRenderer = () => {\n  _s();\n\n  const [elements, setElements] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [activeNode, setActiveNode] = useState();\n  const [newName, setNewName] = useState(\"\");\n  const [instance, setInstance] = useState();\n  useEffect(() => {\n    if (activeNode) setNewName(activeNode.data.label);\n  }, [activeNode]);\n\n  const elementRemoveHandler = elementTobeRemoved => {\n    setElements(prev => removeElements(elementTobeRemoved, prev));\n  };\n\n  const connectHandler = params => {\n    setElements(prev => addEdge(params, prev));\n  };\n\n  const addRectangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"rectangle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addCircleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"circle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addTriangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"triangle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addTextHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"text\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const edgeUpdateHandler = (oldEdge, newConnection) => setElements(els => updateEdge(oldEdge, newConnection, els));\n\n  const clickHandler = e => {\n    var htmlString = e.target.outerHTML.toString();\n    var index = htmlString.indexOf(` id=\"`);\n    index += 5;\n    const currentId = htmlString.substr(index, 13);\n    elements.forEach(_current => {\n      if (_current.id === currentId) {\n        setActiveNode(_current);\n      }\n    }); // setNewName(activeNode.data.label)\n  };\n\n  const updateNodeHandler = () => {\n    if (!activeNode) return;\n    setElements(elements.map(_current => {\n      if (_current.id === activeNode.id) {\n        return { ..._current,\n          data: {\n            label: newName,\n            id: _current.data.id\n          }\n        };\n      }\n\n      return _current;\n    }));\n  };\n\n  const onLoad = reactFlowInstance => {\n    setInstance(reactFlowInstance);\n    reactFlowInstance.fitView();\n  };\n\n  const saveChangesHandler = () => {\n    console.log(\"state\", instance.getElements());\n    localStorage.setItem('state', JSON.stringify(this.state));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"75vh\",\n      width: \"75vw\",\n      border: \"1px solid black\",\n      marginLeft: \"12.5vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onElementsRemove: elementRemoveHandler,\n      onConnect: connectHandler,\n      deleteKeyCode: 8 || 46,\n      onEdgeUpdate: edgeUpdateHandler,\n      nodeTypes: nodeTypes,\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      connectionLineStyle: {\n        stroke: \"black\",\n        strokeWidth: 2\n      },\n      onDoubleClick: clickHandler,\n      onLoad: onLoad,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 15,\n        size: 2,\n        color: \"#c8c8c8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => {\n          switch (node.type) {\n            case \"rectangle\":\n              return \"red\";\n\n            case \"circle\":\n              return \"#00ff00\";\n\n            case \"triangle\":\n              return \"rgb(0,0,255)\";\n\n            default:\n              return \"#eee\";\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: name,\n        onChange: e => setName(e.target.value),\n        type: \"text\",\n        placeholder: \"Enter new node name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addRectangleHandler,\n        children: \"Create Rectangle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addCircleHandler,\n        children: \"Create Circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addTriangleHandler,\n        children: \"Create Triangle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addTextHandler,\n        children: \"Plain text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newName,\n        onChange: e => setNewName(e.target.value),\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: updateNodeHandler,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: saveChangesHandler,\n      children: \"Save changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReactFlowRenderer, \"ICKNjxQOO4Ua1SS0hfJZjcAibU8=\");\n\n_c = ReactFlowRenderer;\nexport default ReactFlowRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactFlowRenderer\");","map":{"version":3,"sources":["F:/Диплом/react-flow/react-flow_test/src/react-flow-renderer/index.jsx"],"names":["React","useState","useEffect","ReactFlow","removeElements","updateEdge","addEdge","Background","MiniMap","Controls","nodeTypes","state","data","num","boolean","ReactFlowRenderer","elements","setElements","name","setName","activeNode","setActiveNode","newName","setNewName","instance","setInstance","label","elementRemoveHandler","elementTobeRemoved","prev","connectHandler","params","addRectangleHandler","newNode","id","Date","now","type","position","x","y","addCircleHandler","addTriangleHandler","addTextHandler","edgeUpdateHandler","oldEdge","newConnection","els","clickHandler","e","htmlString","target","outerHTML","toString","index","indexOf","currentId","substr","forEach","_current","updateNodeHandler","map","onLoad","reactFlowInstance","fitView","saveChangesHandler","console","log","getElements","localStorage","setItem","JSON","stringify","height","width","border","marginLeft","stroke","strokeWidth","node","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport \"./styles.css\";\r\nimport ReactFlow, {\r\n    removeElements,\r\n    updateEdge,\r\n    addEdge,\r\n    Background,\r\n    MiniMap,\r\n    Controls\r\n} from 'react-flow-renderer';\r\n\r\nimport { nodeTypes } from './Nodes';\r\n\r\nstate = { \r\n    data: \"This is data\", \r\n    num: 123, \r\n    boolean: true, \r\n}\r\n\r\nconst ReactFlowRenderer = () => {\r\n    const [elements, setElements] = useState([]);\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [activeNode, setActiveNode] = useState();\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [instance, setInstance] = useState();\r\n\r\n    useEffect(() => {\r\n        if (activeNode) setNewName(activeNode.data.label);\r\n    }, [activeNode]);\r\n\r\n    const elementRemoveHandler = (elementTobeRemoved) => {\r\n        setElements((prev) => removeElements(elementTobeRemoved, prev));\r\n    };\r\n\r\n    const connectHandler = (params) => {\r\n        setElements((prev) => addEdge(params, prev));\r\n    };\r\n    \r\n    const addRectangleHandler = () => {\r\n        const newNode = {\r\n          id: `${Date.now()}`,\r\n          data: { label: `${name}` },\r\n          type: \"rectangle\",\r\n          position: {\r\n            x: 0,\r\n            y: 0\r\n          }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n    \r\n        setElements((prev) => {\r\n          return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addCircleHandler = () => {\r\n        const newNode = {\r\n          id: `${Date.now()}`,\r\n          data: { label: `${name}` },\r\n          type: \"circle\",\r\n          position: {\r\n            x: 0,\r\n            y: 0\r\n          }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n    \r\n        setElements((prev) => {\r\n          return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addTriangleHandler = () => {\r\n        const newNode = {\r\n          id: `${Date.now()}`,\r\n          data: { label: `${name}` },\r\n          type: \"triangle\",\r\n          position: {\r\n            x: 0,\r\n            y: 0\r\n          }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n    \r\n        setElements((prev) => {\r\n          return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addTextHandler = () => {\r\n        const newNode = {\r\n          id: `${Date.now()}`,\r\n          data: { label: `${name}` },\r\n          type: \"text\",\r\n          position: {\r\n            x: 0,\r\n            y: 0\r\n          }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n    \r\n        setElements((prev) => {\r\n          return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\r\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n    const clickHandler = (e) => {\r\n        var htmlString = e.target.outerHTML.toString();\r\n        var index = htmlString.indexOf(` id=\"`);\r\n        index += 5;\r\n        const currentId = htmlString.substr(index, 13);\r\n\r\n        elements.forEach((_current) => {\r\n            if (_current.id === currentId) {\r\n                setActiveNode(_current);\r\n            }\r\n        });\r\n    // setNewName(activeNode.data.label)\r\n    };\r\n\r\n    const updateNodeHandler = () => {\r\n        if (!activeNode) return;\r\n        setElements(\r\n          elements.map((_current) => {\r\n            if (_current.id === activeNode.id) {\r\n              return {\r\n                ..._current,\r\n                data: { label: newName, id: _current.data.id }\r\n              };\r\n            }\r\n    \r\n            return _current;\r\n          })\r\n        );\r\n    };\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        setInstance(reactFlowInstance);\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n    const saveChangesHandler = () => {\r\n        console.log(\"state\", instance.getElements());\r\n        localStorage.setItem('state', JSON.stringify(this.state));\r\n    };\r\n    \r\n\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: \"75vh\",\r\n                width: \"75vw\",\r\n                border: \"1px solid black\",\r\n                marginLeft: \"12.5vw\"\r\n            }}\r\n        >\r\n        <ReactFlow\r\n            elements={elements}\r\n            onElementsRemove={elementRemoveHandler}\r\n            onConnect={connectHandler}\r\n            deleteKeyCode={8 || 46}\r\n            onEdgeUpdate={edgeUpdateHandler}\r\n            nodeTypes={nodeTypes}\r\n            snapToGrid={true}\r\n            snapGrid={[16, 16]}\r\n            connectionLineStyle={{ stroke: \"black\", strokeWidth: 2 }}\r\n            onDoubleClick={clickHandler}\r\n            onLoad={onLoad}\r\n        >\r\n            <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" />\r\n\r\n            <MiniMap\r\n                nodeColor={(node) => {\r\n                    switch (node.type) {\r\n                        case \"rectangle\":\r\n                            return \"red\";\r\n                        case \"circle\":\r\n                            return \"#00ff00\";\r\n                        case \"triangle\":\r\n                            return \"rgb(0,0,255)\";\r\n                        default:\r\n                            return \"#eee\";\r\n                    }   \r\n                }}\r\n            />\r\n\r\n            <Controls />\r\n        </ReactFlow>\r\n\r\n        <div>\r\n            <input\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n                type=\"text\"\r\n                placeholder=\"Enter new node name\"\r\n            />\r\n\r\n            <button type=\"button\" onClick={addRectangleHandler}>\r\n                Create Rectangle\r\n            </button>\r\n\r\n            <button type=\"button\" onClick={addCircleHandler}>\r\n                Create Circle\r\n            </button>\r\n\r\n            <button type=\"button\" onClick={addTriangleHandler}>\r\n                Create Triangle\r\n            </button>\r\n\r\n            <button type=\"button\" onClick={addTextHandler}>\r\n                Plain text\r\n            </button>\r\n        </div>\r\n\r\n        <div>\r\n            <input\r\n                value={newName}\r\n                onChange={(e) => setNewName(e.target.value)}\r\n                type=\"text\"\r\n            />\r\n\r\n            <button type=\"button\" onClick={updateNodeHandler}>\r\n                Update\r\n            </button>\r\n        </div>\r\n\r\n        <button type=\"button\" onClick={saveChangesHandler}>\r\n            Save changes\r\n        </button>\r\n\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default ReactFlowRenderer;"]},"metadata":{},"sourceType":"module"}